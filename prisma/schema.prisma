generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Booking Service Models

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PARTIAL_PAID
  PAID
  REFUNDED
  FAILED
}

enum PaymentMode {
  CASH
  INSURANCE
}

enum VehicleType {
  CAR
  BIKE
  NONE
}

enum FeedbackType {
  SERVICE_QUALITY
  STAFF_BEHAVIOR
  PRICING
  TIMELINESS
  OVERALL_EXPERIENCE
  OTHER
}

// Additional enums from the provided schema
enum ServiceCenterStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  CLOSED
  COMING_SOON
}

enum StaffStatus {
  ACTIVE
  ON_LEAVE
  TERMINATED
  SUSPENDED
}

enum ServiceStatus {
  ACTIVE
  PENDING
  TEMPORARILY_UNAVAILABLE
  COMING_SOON
}

enum ServicePriority {
  NORMAL
  EXPRESS
  PREMIUM
}

enum PackageType {
  ONE_TIME
  SUBSCRIPTION
  MEMBERSHIP
}

enum PaymentPolicy {
  PAYMENT_BEFORE_SERVICE
  PAYMENT_AFTER_SERVICE
  PARTIAL_PAYMENT
  FREE_DIAGNOSTIC
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum RequestType {
  REGISTRATION
  LOGIN
  MOBILE_CHANGE
}

model Vehicle {
  id              String      @id @default(dbgenerated("gen_random_uuid()"))
  userId          String // Foreign key to User microservice
  registrationNo  String
  brandId         String // Foreign key to Brand model in Service Provider microservice
  modelId         String // Foreign key to Model model in Service Provider microservice
  vehicleType     VehicleType
  manufactureYear Int
  color           String?
  fuelType        String?
  transmission    String?
  mileage         Int?
  lastServiceDate DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  bookings        Booking[]

  // Add indexes for better query performance on foreign keys
  @@index([userId])
  @@index([brandId])
  @@index([modelId])
}

model Booking {
  id              String  @id @default(dbgenerated("gen_random_uuid()"))
  bookingNumber   String  @unique
  userId          String // Foreign key to User microservice
  vehicleId       String
  vehicle         Vehicle @relation(fields: [vehicleId], references: [id])
  serviceCenterId String // Foreign key to ServiceCenter in Service Provider microservice
  slotId          String? // Foreign key to Slot in Service Provider microservice

  status          BookingStatus @default(PENDING)
  totalAmount     Decimal       @db.Decimal(10, 2)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMode     PaymentMode   @default(CASH)
  vehicleImages   String[]
  cancelledReason String?
  cancelledBy     String?

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  bookingServices BookingService[]
  bookingHistory  BookingHistory[]

  // Add indexes for better query performance on foreign keys
  @@index([userId])
  @@index([serviceCenterId])
  @@index([slotId])
}

model BookingService {
  id                String  @id @default(dbgenerated("gen_random_uuid()"))
  bookingId         String
  booking           Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  serviceOfferingId String // Foreign key to ServiceCenterOffering in Service Offering microservice

  finalPrice Decimal       @db.Decimal(10, 2)
  status     BookingStatus @default(PENDING)

  comments  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bookingId])
  @@index([serviceOfferingId])
}

model BookingHistory {
  id             String         @id @default(dbgenerated("gen_random_uuid()"))
  bookingId      String
  booking        Booking        @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  status         BookingStatus
  previousStatus BookingStatus?
  actionBy       String // Foreign key to User microservice (can be customer or staff)
  actionRole     String // CUSTOMER, STAFF, SYSTEM
  comments       String?
  createdAt      DateTime       @default(now())

  @@index([bookingId])
  @@index([actionBy]) // Added index for the foreign key to improve performance
}

// Non-booking related models

model User {
  id           String       @id @default(uuid())
  firstName    String
  middleName   String?
  lastName     String
  email        String       @unique
  mobileNumber String       @unique
  isVerified   Boolean      @default(false)
  status       UserStatus   @default(ACTIVE)
  role         UserRole     @default(USER)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  lastLogin    DateTime?
  // Relations
  sessions     Session[]
  otpRequests  OtpRequest[]

  @@index([email])
  @@index([mobileNumber])
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  refreshToken String   @unique
  userAgent    String?
  ipAddress    String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model OtpRequest {
  id              String      @id @default(uuid())
  userId          String
  requestType     RequestType
  otp             String // Hashed OTP, not stored in plain text
  verified        Boolean     @default(false)
  expiresAt       DateTime
  createdAt       DateTime    @default(now())
  // For mobile number change
  newMobileNumber String?
  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Brand {
  id             String          @id @default(dbgenerated("gen_random_uuid()"))
  name           String          @unique
  logo           String?
  description    String?
  vehicleType    VehicleType     @default(CAR)
  website        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  models         Model[]
  serviceCenters ServiceCenter[]
}

model Model {
  id          String      @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  brand       Brand       @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId     String
  vehicleType VehicleType @default(CAR)
  isActive    Boolean     @default(true)
  imageUrl    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([brandId, name, vehicleType])
}

model Address {
  id              String        @id @default(dbgenerated("gen_random_uuid()"))
  street          String
  city            String
  state           String
  country         String
  postalCode      String
  landmark        String?
  additionalInfo  String?
  longitude       Float
  latitude        Float
  isVerified      Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  // Relation to service center
  serviceCenter   ServiceCenter @relation(fields: [serviceCenterId], references: [id], onDelete: Cascade)
  serviceCenterId String        @unique
}

model ServiceCenter {
  id                     String                  @id @default(dbgenerated("gen_random_uuid()"))
  name                   String
  brand                  Brand                   @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId                String // Foreign key for Brand
  phone                  String
  alternatePhone         String?
  email                  String?
  website                String?
  status                 ServiceCenterStatus     @default(ACTIVE)
  rating                 Float?                  @default(0)
  totalRatings           Int                     @default(0)
  capacity               Int                     @default(5)
  description            String?
  images                 String[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  slots                  Slot[]
  operatingHours         OperatingHours[]
  serviceCenterOfferings ServiceCenterOffering[]
  Address                Address[]
}

model OperatingHours {
  id              String        @id @default(dbgenerated("gen_random_uuid()"))
  serviceCenter   ServiceCenter @relation(fields: [serviceCenterId], references: [id], onDelete: Cascade)
  serviceCenterId String
  openTime        DateTime
  closeTime       DateTime
  isClosed        Boolean       @default(false)
  isHoliday       Boolean       @default(false)
  holidayReason   String?

  @@unique([serviceCenterId])
}

model Slot {
  id                 String        @id @default(dbgenerated("gen_random_uuid()"))
  serviceCenter      ServiceCenter @relation(fields: [serviceCenterId], references: [id], onDelete: Cascade)
  serviceCenterId    String
  startTime          DateTime
  endTime            DateTime
  isAvailable        Boolean       @default(true)
  slotCapacity       Int           @default(1)
  bookedCapacity     Int           @default(0)
  isBlocked          Boolean       @default(false)
  blockReason        String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  externalBookingIds String[]
}

// Service Category (e.g. Regular Maintenance, Repairs, etc.)
model ServiceCategory {
  serviceCategoryId String        @id @default(dbgenerated("gen_random_uuid()")) @map("service_category_id") @db.Uuid
  name              String        @db.VarChar(255)
  description       String?       @db.VarChar(255)
  vehicleType       VehicleType   @default(CAR)
  icon              String?       @db.Text
  displayOrder      Int           @default(0)
  isPopular         Boolean       @default(false)
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  serviceTypes      ServiceType[]

  @@unique([name, vehicleType])
  @@index([vehicleType, isPopular])
  @@map("service_category")
}

// Service Type (e.g. Basic Service, Premium Service, Brake Replacement, etc.)
model ServiceType {
  serviceTypeId          String                  @id @default(dbgenerated("gen_random_uuid()")) @map("service_type_id") @db.Uuid
  name                   String                  @db.VarChar(255)
  description            String?                 @db.VarChar(255)
  longDescription        String?                 @map("long_description") @db.Text
  estimatedDuration      Int                     @map("estimated_duration")
  displayImage           String?                 @map("display_image") @db.Text
  categoryId             String                  @map("category_id") @db.Uuid
  category               ServiceCategory         @relation(fields: [categoryId], references: [serviceCategoryId], onDelete: Cascade)
  recommendedFrequency   String?                 @map("recommended_frequency") @db.Text
  warningThreshold       Int?                    @map("warning_threshold")
  displayOrder           Int                     @default(0) @map("display_order")
  isPopular              Boolean                 @default(false) @map("is_popular")
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt @map("updated_at")
  serviceCenterOfferings ServiceCenterOffering[]
  serviceComponents      ServiceTypeComponent[]
  // servicePackages        ServicePackageItem[]

  @@unique([name, categoryId])
  @@index([categoryId, isPopular])
  @@map("service_type")
}

// Components that make up a service type
model ServiceComponent {
  serviceComponentId    String                 @id @default(dbgenerated("gen_random_uuid()")) @map("service_component_id") @db.Uuid
  name                  String                 @unique @db.VarChar(255)
  description           String?                @db.VarChar(255)
  estimatedDuration     Int?                   @map("estimated_duration")
  vehicleType           VehicleType?           @default(NONE) @map("vehicle_type")
  cost                  Decimal                @default(0) @db.Decimal(10, 2)
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  serviceTypeComponents ServiceTypeComponent[]

  @@map("service_component")
}

// Many-to-many relationship between ServiceType and ServiceComponent
model ServiceTypeComponent {
  serviceTypeComponentId String           @id @default(dbgenerated("gen_random_uuid()")) @map("service_type_component_id") @db.Uuid
  serviceTypeId          String           @map("service_type_id") @db.Uuid // Added @db.Uuid to match ServiceType
  serviceType            ServiceType      @relation(fields: [serviceTypeId], references: [serviceTypeId], onDelete: Cascade)
  serviceComponentId     String           @map("service_component_id") @db.Uuid
  serviceComponent       ServiceComponent @relation(fields: [serviceComponentId], references: [serviceComponentId], onDelete: Cascade)
  // isDefault              Boolean          @default(true) @map("is_default")
  // isRequired             Boolean          @default(false) @map("is_required")
  // additionalPrice        Decimal?         @map("additional_price") @db.Decimal(10, 2)
  createdAt              DateTime         @default(now()) @map("created_at")
  updatedAt              DateTime         @updatedAt @map("updated_at")

  @@unique([serviceTypeId, serviceComponentId])
  @@map("service_type_component")
}

// Service Offering by a Service Center
model ServiceCenterOffering {
  serviceCenterOfferingId String            @id @default(dbgenerated("gen_random_uuid()")) @map("service_center_offering_id") @db.Uuid
  serviceCenterId         String            @map("service_center_id")
  serviceCenter           ServiceCenter     @relation(fields: [serviceCenterId], references: [id], onDelete: Cascade)
  serviceTypeId           String            @map("service_type_id") @db.Uuid // Added @db.Uuid to match ServiceType
  serviceType             ServiceType       @relation(fields: [serviceTypeId], references: [serviceTypeId])
  status                  ServiceStatus     @default(ACTIVE)
  basePrice               Decimal           @map("base_price") @db.Decimal(10, 2)
  discountPercentage      Decimal?          @map("discount_percentage") @db.Decimal(5, 2)
  // discountAbsolute        Decimal?          @map("discount_absolute") @db.Decimal(10, 2)
  discountValidUntil      DateTime?         @map("discount_valid_until")
  timeToComplete          Int?              @map("time_to_complete")
  availablePriorities     ServicePriority[] @default([NORMAL]) @map("available_priorities")
  priorityPrices          Json?             @map("priority_prices")
  minimumAdvanceBooking   Int?              @map("minimum_advance_booking")
  termsAndConditions      String?           @map("terms_and_conditions") @db.Text
  paymentPolicy           PaymentPolicy     @default(PAYMENT_AFTER_SERVICE) @map("payment_policy")
  warrantyDays            Int?              @map("warranty_days")
  warrantyKilometers      Int?              @map("warranty_kilometers")
  isHighlighted           Boolean           @default(false) @map("is_highlighted")
  // hasPickupDropService    Boolean           @default(false) @map("has_pickup_drop_service")
  // pickupDropFee           Decimal?          @map("pickup_drop_fee") @db.Decimal(10, 2)
  hasEmergencyService     Boolean           @default(false) @map("has_emergency_service")
  emergencyServiceFee     Decimal?          @map("emergency_service_fee") @db.Decimal(10, 2)
  rating                  Decimal?          @db.Decimal(3, 2)
  reviewCount             Int               @default(0) @map("review_count")
  createdAt               DateTime          @default(now()) @map("created_at")
  updatedAt               DateTime          @updatedAt @map("updated_at")
  // vehicleBrandServiceOfferings VehicleBrandServiceOffering[]
  // additionalFeatures           AdditionalFeature[]
  // serviceTaxes                 ServiceOfferingTax[]
  // servicePackages              ServicePackageOffering[]
  // seasonalDiscounts            SeasonalDiscount[]

  @@unique([serviceCenterId, serviceTypeId])
  @@index([status, serviceTypeId])
  @@index([hasEmergencyService, status])
  // @@index([hasPickupDropService, status])
  @@map("service_center_offering")
}

// ------------------------------------------------THE ABOVE ONE IS THE UPDATED SCHEMA -----------------------------------------------------
// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// enum ServiceCenterStatus {
//   ACTIVE
//   INACTIVE
//   MAINTENANCE
//   CLOSED
//   COMING_SOON
// }

// enum StaffStatus {
//   ACTIVE
//   ON_LEAVE
//   TERMINATED
//   SUSPENDED
// }

// enum VehicleType {
//   CAR
//   BIKE
//   NONE
// }

// enum ServiceStatus {
//   ACTIVE
//   PENDING
//   TEMPORARILY_UNAVAILABLE
//   COMING_SOON
// }

// enum ServicePriority {
//   NORMAL
//   EXPRESS
//   PREMIUM
// }

// enum PackageType {
//   ONE_TIME
//   SUBSCRIPTION
//   MEMBERSHIP
// }

// enum PaymentPolicy {
//   PAYMENT_BEFORE_SERVICE
//   PAYMENT_AFTER_SERVICE
//   PARTIAL_PAYMENT
//   FREE_DIAGNOSTIC
// }

// enum UserStatus {
//   ACTIVE
//   SUSPENDED
//   INACTIVE
// }

// enum UserRole {
//   USER
//   ADMIN
//   SUPER_ADMIN
// }

// enum RequestType {
//   REGISTRATION
//   LOGIN
//   MOBILE_CHANGE
// }

// // Booking Service Models

// enum BookingStatus {
//   PENDING
//   CONFIRMED
//   IN_PROGRESS
//   COMPLETED
//   CANCELLED
//   RESCHEDULED
//   NO_SHOW
// }

// enum PaymentStatus {
//   PENDING
//   PARTIAL_PAID
//   PAID
//   REFUNDED
//   FAILED
// }

// enum FeedbackType {
//   SERVICE_QUALITY
//   STAFF_BEHAVIOR
//   PRICING
//   TIMELINESS
//   OVERALL_EXPERIENCE
//   OTHER
// }

// model Vehicle {
//   id              String      @id @default(dbgenerated("gen_random_uuid()"))
//   userId          String // Foreign key to User microservice
//   registrationNo  String      @unique
//   brandId         String // Foreign key to Brand model in Service Provider microservice
//   modelId         String // Foreign key to Model model in Service Provider microservice
//   vehicleType     VehicleType
//   manufactureYear Int
//   color           String?
//   fuelType        String?
//   transmission    String?
//   mileage         Int?
//   lastServiceDate DateTime?
//   insuranceId     String? // Foreign key to Insurance microservice
//   createdAt       DateTime    @default(now())
//   updatedAt       DateTime    @updatedAt
//   bookings        Booking[]

//   // Add indexes for better query performance on foreign keys
//   @@index([userId])
//   @@index([brandId])
//   @@index([modelId])
// }

// model Booking {
//   id                  String           @id @default(dbgenerated("gen_random_uuid()"))
//   bookingNumber       String           @unique
//   userId              String // Foreign key to User microservice
//   vehicleId           String
//   vehicle             Vehicle          @relation(fields: [vehicleId], references: [id])
//   serviceCenterId     String // Foreign key to ServiceCenter in Service Provider microservice
//   slotId              String? // Foreign key to Slot in Service Provider microservice
//   scheduledDateTime   DateTime
//   estimatedEndTime    DateTime?
//   actualEndTime       DateTime?
//   status              BookingStatus    @default(PENDING)
//   totalAmount         Decimal          @db.Decimal(10, 2)
//   discountAmount      Decimal?         @db.Decimal(10, 2)
//   taxAmount           Decimal?         @db.Decimal(10, 2)
//   finalAmount         Decimal          @db.Decimal(10, 2)
//   paymentStatus       PaymentStatus    @default(PENDING)
//   pickupDropRequired  Boolean          @default(false)
//   pickupAddress       String?
//   dropAddress         String?
//   pickupFee           Decimal?         @db.Decimal(10, 2)
//   specialInstructions String?
//   cancelledReason     String?
//   cancelledBy         String?
//   refundAmount        Decimal?         @db.Decimal(10, 2)
//   refundReason        String?
//   refundedAt          DateTime?
//   createdAt           DateTime         @default(now())
//   updatedAt           DateTime         @updatedAt
//   bookingServices     BookingService[]
//   bookingHistory      BookingHistory[]

//   // Add indexes for better query performance on foreign keys
//   @@index([userId])
//   @@index([serviceCenterId])
//   @@index([slotId])
// }

// model BookingService {
//   id                String        @id @default(dbgenerated("gen_random_uuid()"))
//   bookingId         String
//   booking           Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
//   serviceOfferingId String // Foreign key to ServiceCenterOffering in Service Offering microservice
//   packageOfferingId String? // Foreign key to ServicePackageOffering in Service Offering microservice
//   quantity          Int           @default(1)
//   unitPrice         Decimal       @db.Decimal(10, 2)
//   discountAmount    Decimal?      @db.Decimal(10, 2)
//   finalPrice        Decimal       @db.Decimal(10, 2)
//   status            BookingStatus @default(PENDING)
//   serviceStartTime  DateTime?
//   serviceEndTime    DateTime?
//   staffAssigned     String? // Foreign key to Staff in Service Provider microservice
//   comments          String?
//   createdAt         DateTime      @default(now())
//   updatedAt         DateTime      @updatedAt

//   @@index([bookingId])
//   @@index([serviceOfferingId])
//   @@index([packageOfferingId])
//   @@index([staffAssigned])
// }

// model BookingHistory {
//   id             String         @id @default(dbgenerated("gen_random_uuid()"))
//   bookingId      String
//   booking        Booking        @relation(fields: [bookingId], references: [id], onDelete: Cascade)
//   status         BookingStatus
//   previousStatus BookingStatus?
//   actionBy       String // Foreign key to User microservice (can be customer or staff)
//   actionRole     String // CUSTOMER, STAFF, SYSTEM
//   comments       String?
//   createdAt      DateTime       @default(now())

//   @@index([bookingId])
//   @@index([actionBy]) // Added index for the foreign key to improve performance
// }

// model User {
//   id           String       @id @default(uuid())
//   firstName    String
//   middleName   String?
//   lastName     String
//   email        String       @unique
//   mobileNumber String       @unique
//   isVerified   Boolean      @default(false)
//   status       UserStatus   @default(ACTIVE)
//   role         UserRole     @default(USER)
//   createdAt    DateTime     @default(now())
//   updatedAt    DateTime     @updatedAt
//   lastLogin    DateTime?
//   // Relations
//   sessions     Session[]
//   otpRequests  OtpRequest[]

//   @@index([email])
//   @@index([mobileNumber])
// }

// model Session {
//   id           String   @id @default(uuid())
//   userId       String
//   refreshToken String   @unique
//   userAgent    String?
//   ipAddress    String?
//   expiresAt    DateTime
//   createdAt    DateTime @default(now())
//   // Relations
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@index([userId])
// }

// model OtpRequest {
//   id              String      @id @default(uuid())
//   userId          String
//   requestType     RequestType
//   otp             String // Hashed OTP, not stored in plain text
//   verified        Boolean     @default(false)
//   expiresAt       DateTime
//   createdAt       DateTime    @default(now())
//   // For mobile number change
//   newMobileNumber String?
//   // Relations
//   user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@index([userId])
// }

// model Brand {
//   id             String          @id @default(dbgenerated("gen_random_uuid()"))
//   name           String          @unique
//   logo           String?
//   description    String?
//   vehicleType    VehicleType
//   website        String?
//   createdAt      DateTime        @default(now())
//   updatedAt      DateTime        @updatedAt
//   models         Model[]
//   serviceCenters ServiceCenter[]

//   // VehicleBrandServiceOffering VehicleBrandServiceOffering[]
// }

// model Model {
//   id          String      @id @default(dbgenerated("gen_random_uuid()"))
//   name        String
//   brand       Brand       @relation(fields: [brandId], references: [id], onDelete: Cascade)
//   brandId     String
//   vehicleType VehicleType
//   isActive    Boolean     @default(true)
//   imageUrl    String?
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @updatedAt
//   // vehicleBrandServiceOfferings VehicleBrandServiceOffering[]

//   @@unique([brandId, name, vehicleType])
// }

// model Address {
//   id              String        @id @default(dbgenerated("gen_random_uuid()")) // Standardized UUID generation
//   street          String
//   city            String
//   state           String
//   country         String
//   postalCode      String
//   landmark        String?
//   additionalInfo  String?
//   longitude       Float
//   latitude        Float
//   isVerified      Boolean       @default(false)
//   createdAt       DateTime      @default(now())
//   updatedAt       DateTime      @updatedAt
//   // Relation to service center
//   serviceCenter   ServiceCenter @relation(fields: [serviceCenterId], references: [id], onDelete: Cascade)
//   serviceCenterId String        @unique
// }

// model ServiceCenter {
//   id                     String                  @id @default(dbgenerated("gen_random_uuid()"))
//   name                   String
//   brand                  Brand                   @relation(fields: [brandId], references: [id], onDelete: Cascade) // Ensure proper relation
//   brandId                String // Foreign key for Brand
//   phone                  String
//   alternatePhone         String?
//   email                  String?
//   website                String?
//   status                 ServiceCenterStatus     @default(ACTIVE)
//   rating                 Float?                  @default(0)
//   totalRatings           Int                     @default(0)
//   capacity               Int                     @default(5)
//   description            String?
//   images                 String[]
//   createdAt              DateTime                @default(now())
//   updatedAt              DateTime                @updatedAt
//   slots                  Slot[]
//   operatingHours         OperatingHours[]
//   serviceCenterOfferings ServiceCenterOffering[]
//   Address                Address[]
// }

// model OperatingHours {
//   id              String        @id @default(dbgenerated("gen_random_uuid()"))
//   serviceCenter   ServiceCenter @relation(fields: [serviceCenterId], references: [id], onDelete: Cascade)
//   serviceCenterId String
//   openTime        DateTime
//   closeTime       DateTime
//   isClosed        Boolean       @default(false)
//   isHoliday       Boolean       @default(false)
//   holidayReason   String?

//   @@unique([serviceCenterId])
// }

// model Slot {
//   id                 String        @id @default(dbgenerated("gen_random_uuid()"))
//   serviceCenter      ServiceCenter @relation(fields: [serviceCenterId], references: [id], onDelete: Cascade)
//   serviceCenterId    String
//   startTime          DateTime
//   endTime            DateTime
//   isAvailable        Boolean       @default(true)
//   slotCapacity       Int           @default(1)
//   bookedCapacity     Int           @default(0)
//   isBlocked          Boolean       @default(false)
//   blockReason        String?
//   createdAt          DateTime      @default(now())
//   updatedAt          DateTime      @updatedAt
//   externalBookingIds String[]
// }

// // Service Category (e.g. Regular Maintenance, Repairs, etc.)
// model ServiceCategory {
//   serviceCategoryId String        @id @default(dbgenerated("gen_random_uuid()")) @map("service_category_id") @db.Uuid
//   name              String        @db.VarChar(255)
//   description       String?       @db.VarChar(255)
//   vehicleType       VehicleType   @default(CAR)
//   icon              String?       @db.Text
//   displayOrder      Int           @default(0)
//   isPopular         Boolean       @default(false)
//   createdAt         DateTime      @default(now()) @map("created_at")
//   updatedAt         DateTime      @updatedAt @map("updated_at")
//   serviceTypes      ServiceType[]

//   @@unique([name, vehicleType])
//   @@index([vehicleType, isPopular])
//   @@map("service_category")
// }

// // Service Type (e.g. Basic Service, Premium Service, Brake Replacement, etc.)
// model ServiceType {
//   serviceTypeId          String                  @id @default(dbgenerated("gen_random_uuid()")) @map("service_type_id") @db.Uuid
//   name                   String                  @db.VarChar(255)
//   description            String?                 @db.VarChar(255)
//   longDescription        String?                 @map("long_description") @db.Text
//   estimatedDuration      Int                     @map("estimated_duration")
//   displayImage           String?                 @map("display_image") @db.Text
//   categoryId             String                  @map("category_id") @db.Uuid
//   category               ServiceCategory         @relation(fields: [categoryId], references: [serviceCategoryId], onDelete: Cascade)
//   recommendedFrequency   String?                 @map("recommended_frequency") @db.Text
//   warningThreshold       Int?                    @map("warning_threshold")
//   displayOrder           Int                     @default(0) @map("display_order")
//   isPopular              Boolean                 @default(false) @map("is_popular")
//   createdAt              DateTime                @default(now()) @map("created_at")
//   updatedAt              DateTime                @updatedAt @map("updated_at")
//   serviceCenterOfferings ServiceCenterOffering[]
//   serviceComponents      ServiceTypeComponent[]
//   // servicePackages        ServicePackageItem[]

//   @@unique([name, categoryId])
//   @@index([categoryId, isPopular])
//   @@map("service_type")
// }

// // Components that make up a service type
// model ServiceComponent {
//   serviceComponentId    String                 @id @default(dbgenerated("gen_random_uuid()")) @map("service_component_id") @db.Uuid
//   name                  String                 @unique @db.VarChar(255)
//   description           String?                @db.VarChar(255)
//   estimatedDuration     Int?                   @map("estimated_duration")
//   vehicleType           VehicleType?           @default(NONE) @map("vehicle_type")
//   cost                  Decimal                @default(0) @db.Decimal(10, 2)
//   createdAt             DateTime               @default(now()) @map("created_at")
//   updatedAt             DateTime               @updatedAt @map("updated_at")
//   serviceTypeComponents ServiceTypeComponent[]

//   @@map("service_component")
// }

// // Many-to-many relationship between ServiceType and ServiceComponent
// model ServiceTypeComponent {
//   serviceTypeComponentId String           @id @default(dbgenerated("gen_random_uuid()")) @map("service_type_component_id") @db.Uuid
//   serviceTypeId          String           @map("service_type_id") @db.Uuid // Added @db.Uuid to match ServiceType
//   serviceType            ServiceType      @relation(fields: [serviceTypeId], references: [serviceTypeId], onDelete: Cascade)
//   serviceComponentId     String           @map("service_component_id") @db.Uuid
//   serviceComponent       ServiceComponent @relation(fields: [serviceComponentId], references: [serviceComponentId], onDelete: Cascade)
//   // isDefault              Boolean          @default(true) @map("is_default")
//   // isRequired             Boolean          @default(false) @map("is_required")
//   // additionalPrice        Decimal?         @map("additional_price") @db.Decimal(10, 2)
//   createdAt              DateTime         @default(now()) @map("created_at")
//   updatedAt              DateTime         @updatedAt @map("updated_at")

//   @@unique([serviceTypeId, serviceComponentId])
//   @@map("service_type_component")
// }

// // Service Offering by a Service Center
// model ServiceCenterOffering {
//   serviceCenterOfferingId String            @id @default(dbgenerated("gen_random_uuid()")) @map("service_center_offering_id") @db.Uuid
//   serviceCenterId         String            @map("service_center_id")
//   serviceCenter           ServiceCenter     @relation(fields: [serviceCenterId], references: [id], onDelete: Cascade)
//   serviceTypeId           String            @map("service_type_id") @db.Uuid // Added @db.Uuid to match ServiceType
//   serviceType             ServiceType       @relation(fields: [serviceTypeId], references: [serviceTypeId])
//   status                  ServiceStatus     @default(ACTIVE)
//   basePrice               Decimal           @map("base_price") @db.Decimal(10, 2)
//   discountPercentage      Decimal?          @map("discount_percentage") @db.Decimal(5, 2)
//   // discountAbsolute        Decimal?          @map("discount_absolute") @db.Decimal(10, 2)
//   discountValidUntil      DateTime?         @map("discount_valid_until")
//   timeToComplete          Int?              @map("time_to_complete")
//   availablePriorities     ServicePriority[] @default([NORMAL]) @map("available_priorities")
//   priorityPrices          Json?             @map("priority_prices")
//   minimumAdvanceBooking   Int?              @map("minimum_advance_booking")
//   termsAndConditions      String?           @map("terms_and_conditions") @db.Text
//   paymentPolicy           PaymentPolicy     @default(PAYMENT_AFTER_SERVICE) @map("payment_policy")
//   warrantyDays            Int?              @map("warranty_days")
//   warrantyKilometers      Int?              @map("warranty_kilometers")
//   isHighlighted           Boolean           @default(false) @map("is_highlighted")
//   // hasPickupDropService    Boolean           @default(false) @map("has_pickup_drop_service")
//   // pickupDropFee           Decimal?          @map("pickup_drop_fee") @db.Decimal(10, 2)
//   hasEmergencyService     Boolean           @default(false) @map("has_emergency_service")
//   emergencyServiceFee     Decimal?          @map("emergency_service_fee") @db.Decimal(10, 2)
//   rating                  Decimal?          @db.Decimal(3, 2)
//   reviewCount             Int               @default(0) @map("review_count")
//   createdAt               DateTime          @default(now()) @map("created_at")
//   updatedAt               DateTime          @updatedAt @map("updated_at")
//   // vehicleBrandServiceOfferings VehicleBrandServiceOffering[]
//   // additionalFeatures           AdditionalFeature[]
//   // serviceTaxes                 ServiceOfferingTax[]
//   // servicePackages              ServicePackageOffering[]
//   // seasonalDiscounts            SeasonalDiscount[]

//   @@unique([serviceCenterId, serviceTypeId])
//   @@index([status, serviceTypeId])
//   @@index([hasEmergencyService, status])
//   // @@index([hasPickupDropService, status])
//   @@map("service_center_offering")
// }
